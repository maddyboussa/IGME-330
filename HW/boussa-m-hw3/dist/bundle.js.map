{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://boussa-m-hw3/./src/utils.ts","webpack://boussa-m-hw3/./src/audio.ts","webpack://boussa-m-hw3/./src/canvas.ts","webpack://boussa-m-hw3/./src/enums/defaults.enum.ts","webpack://boussa-m-hw3/./src/classes/CircleSprite.ts","webpack://boussa-m-hw3/./src/classes/RectangleSprite.ts","webpack://boussa-m-hw3/./src/main.ts","webpack://boussa-m-hw3/./src/loader.ts"],"sourcesContent":["const makeColor = (red, green, blue, alpha = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n  \r\nconst getRandom = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n};\r\n  \r\nconst getRandomColor = () => {\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor,255-floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n  \r\nconst getLinearGradient = (ctx,startX,startY,endX,endY,colorStops) => {\r\n    let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n    for(let stop of colorStops){\r\n      lg.addColorStop(stop.percent,stop.color);\r\n    }\r\n    return lg;\r\n};\r\n  \r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element) => {\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen();\r\n    } else if (element.mozRequestFullscreen) {\r\n      element.mozRequestFullscreen();\r\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n      element.mozRequestFullScreen();\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen();\r\n    }\r\n    // .. and do nothing if the method is not supported\r\n};\r\n  \r\nexport {makeColor, getRandomColor, getLinearGradient, goFullscreen};","\r\nlet audioCtx:AudioContext;\r\n\r\n// we will be exporting these variables\r\nlet element:HTMLAudioElement, sourceNode:MediaElementAudioSourceNode, analyserNode, gainNode;\r\n\r\nlet biquadFilter, lowShelfBiquadFilter;\r\n\r\n// fake enumeration\r\nconst DEFAULTS = Object.freeze({\r\n    gain: .5,\r\n    numSamples : 256\r\n});\r\n\r\n// set up web audio api\r\nconst setupWebaudio = (filePath:string) =>{\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // creates an <audio> element\r\n    element = new Audio();  // document.querySelector(\"audio\");\r\n\r\n    // have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // create analyser node\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // create biquad filter for highshelf\r\n    biquadFilter = audioCtx.createBiquadFilter();\r\n    biquadFilter.type = \"highshelf\";\r\n    biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // create biquad filter for lowshelf\r\n    lowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowShelfBiquadFilter.type = \"lowshelf\";\r\n    lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n\r\n    // connect the nodes to form audio graph\r\n    // source -> trebel -> bass -> distortion -> analyser -> gain -> destination\r\n    sourceNode.connect(biquadFilter);\r\n    biquadFilter.connect(lowShelfBiquadFilter);\r\n    lowShelfBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath:string) =>{\r\n    element.src = filePath;\r\n}\r\n\r\nconst playCurrentSound = () =>{\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () =>{\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value:string) =>{\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nconst setHighshelfGain = (value:string) =>{\r\n    biquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nconst setLowshelfGain = (value:string) =>{\r\n    lowShelfBiquadFilter.gain.setValueAtTime(value, audioCtx.currentTime);\r\n}\r\n\r\nexport {audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, setHighshelfGain, setLowshelfGain, analyserNode};\r\n\r\n","\r\nimport * as utils from './utils';\r\nimport { CircleSprite } from './classes/CircleSprite';\r\nimport { RectangleSprite } from './classes/RectangleSprite';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nlet ctx,canvasWidth,canvasHeight,gradient,analyserNode,audioData;\r\n\r\nlet maxRadius;\r\nlet middleY;\r\nlet middleX;\r\n\r\n// declare circles\r\nlet circle1, circle2\r\n\r\nconst setupCanvas = (canvasElement,analyserNodeRef) =>{\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\r\n    // initialize 2 circle sprites in the center of the canvas\r\n    circle1 = new CircleSprite(canvasWidth / 2, canvasHeight / 2, 1, \"white\");\r\n    circle2 = new CircleSprite(canvasWidth / 2, canvasHeight / 2, 1, \"white\");\r\n\r\n    // determine max radii for the circles\r\n    maxRadius = canvasHeight / 9;\r\n\r\n    middleY = canvasHeight / 2;\r\n    middleX = canvasHeight / 2;\r\n}\r\n\r\nconst draw = (params:DrawParams) =>{\r\n\r\n    // load audioData array based on visualization method selected\r\n    if (params.visMethod == 1)\r\n    {\r\n        // get frequency data\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    }\r\n    else if (params.visMethod == 2)\r\n    {\r\n        // get waveform data\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n    }\r\n\t\r\n\t// draw background\r\n\tctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = 0.1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // draw method: circles\r\n    if (params.drawMethod == \"circles\")\r\n    {\r\n        ctx.save();\r\n\r\n        // circles\r\n        // loop through audio data array\r\n        for (let i = 0; i < audioData.length; i++)\r\n        {\r\n            let percent = audioData[i] / 255;\r\n            // clamp percent to see circles even if volume is 0\r\n            //if (percent < 0.05) percent = .05;\r\n\r\n            let circleRadius = percent * maxRadius;\r\n\r\n            // cirlce 1\r\n            // update circle properties according to audio data\r\n            circle1.radius = circleRadius;\r\n            circle1.color = utils.makeColor(1, 0, 1, percent);\r\n            // draw circle sprites based on current audio data\r\n            circle1.draw(ctx);\r\n\r\n            // circle 2\r\n            circle2.radius = circleRadius * 0.7;\r\n            circle2.draw(ctx);\r\n        }\r\n        ctx.restore();\r\n\r\n        // rectangles\r\n        ctx.save();\r\n\r\n        // initial translate\r\n        ctx.translate(middleX + 400, middleY - 40);\r\n\r\n        let maxHeight = 700;\r\n\r\n        for (let i = 0; i < audioData.length; i++)\r\n        {\r\n            let percent = audioData[i] / 255;\r\n\r\n            // everytime you draw, move right\r\n            ctx.translate(1, 0);\r\n\r\n            // rotate to draw bars in a circle\r\n            ctx.rotate(Math.PI * 2 / audioData.length);\r\n\r\n            ctx.save();\r\n            ctx.scale(1, -1);   // negates y axis\r\n            let rect = new RectangleSprite(0, 0, 1, maxHeight * percent, \"white\");\r\n            rect.draw(ctx);\r\n            ctx.restore();\r\n\r\n            // creates some space between bars\r\n            ctx.translate(1, 0);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // draw method: bars\r\n    if (params.drawMethod == \"bars\")\r\n    {\r\n        ctx.save();\r\n\r\n        ctx.translate(0, middleY);\r\n\r\n        let maxHeight = 200;\r\n        let translateDist = canvasWidth / audioData.length;\r\n\r\n        for (let i = 0; i < audioData.length; i++)\r\n        {\r\n            let percent = audioData[i] / 255;\r\n\r\n            // move right as you draw\r\n            ctx.translate(translateDist, 0);\r\n\r\n            // draw 2 mirrored bars\r\n            ctx.save()\r\n            let rect1 = new RectangleSprite(0, 0, 10, maxHeight * percent, \"white\");\r\n            rect1.draw(ctx);\r\n            ctx.save();\r\n            ctx.scale(1, -1);\r\n            let rect2 = new RectangleSprite(0, 0, 10, maxHeight * percent, \"white\");\r\n            rect2.draw(ctx);\r\n            ctx.restore();\r\n            ctx.restore();\r\n\r\n            // creates some space between bars\r\n            ctx.translate(1, 0);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // draw method: lines\r\n    if (params.drawMethod == \"lines\")\r\n    {\r\n        // top line\r\n        ctx.save();\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.lineWidth = 1;\r\n        let x1 = 0;\r\n        let y1 = middleY;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n\r\n        for (let i = 0; i < audioData.length; i++)\r\n        {\r\n            ctx.lineTo(x1, y1 - audioData[i]);\r\n            x1 += (ctx.canvas.width/(audioData.length - 10));\r\n        }\r\n\r\n        ctx.lineTo(x1 - 8, y1);\r\n        x1 = canvasWidth;\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n\r\n        // bottom line\r\n        ctx.save();\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.lineWidth = 1;\r\n        let x2 = 0;\r\n        let y2 = middleY + 5;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x2, y2);\r\n\r\n        for (let i = 0; i < audioData.length; i++)\r\n        {\r\n            ctx.lineTo(x2, y2 + audioData[i]);\r\n            x2 += (ctx.canvas.width/(audioData.length - 10));\r\n        }\r\n\r\n        ctx.lineTo(x2 - 8, y2);\r\n        x2 = canvasWidth;\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n\r\n        // top right line\r\n        ctx.save();\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.lineWidth = 1;\r\n        let x3 = canvasWidth;\r\n        let y3 = middleY;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x3, y3);\r\n\r\n        for (let i = 0; i < audioData.length; i++)\r\n        {\r\n            ctx.lineTo(x3, y3 - audioData[i]);\r\n            x3 -= (ctx.canvas.width/(audioData.length - 10));\r\n        }\r\n\r\n        ctx.lineTo(x3 - 8, y3);\r\n        x3 = 0;\r\n        ctx.lineTo(x3, y3);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n\r\n        // bottom right line\r\n        ctx.save();\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.lineWidth = 1;\r\n        let x4 = canvasWidth;\r\n        let y4 = middleY + 5;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x4, y4);\r\n\r\n        for (let i = 0; i < audioData.length; i++)\r\n        {\r\n            ctx.lineTo(x4, y4 + audioData[i]);\r\n            x4 -= (ctx.canvas.width/(audioData.length - 10));\r\n        }\r\n\r\n        ctx.lineTo(x4 - 8, y4);\r\n        x4 = 0;\r\n        ctx.lineTo(x4, y4);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n    }\r\n\r\n}\r\n\r\nexport {setupCanvas,draw};","export enum DEFAULTS {\r\n    sound1  =  \"media/AAA_Powerline.mp3\"\r\n}","export class CircleSprite{\r\n    static type = \"arc\";\r\n\r\n    x:number;\r\n    y:number;\r\n    radius:number;\r\n    color: CanvasRenderingContext2D;\r\n\r\n    constructor(x:number, y:number, radius:number, color){\r\n        // initialize properties\r\n        Object.assign(this, {x, y, radius, color});\r\n    }\r\n    \r\n    draw(ctx:CanvasRenderingContext2D){\r\n        ctx.save();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n}","export class RectangleSprite{\r\n\r\n    x:number;\r\n    y:number;\r\n    width:number;\r\n    height:number;\r\n    color: CanvasRenderingContext2D;\r\n\r\n    constructor(x:number, y:number, width:number, height:number, color){\r\n        // initialize properties\r\n        Object.assign(this, {x, y, width, height, color});\r\n    }\r\n    \r\n    draw(ctx:CanvasRenderingContext2D){\r\n        ctx.save();\r\n        ctx.fillStyle = this.color;\r\n        ctx.fillRect(this.x, this.y, this.width, this.height)\r\n        ctx.restore();\r\n    }\r\n}","/*\r\n\tmain.js is primarily responsible for hooking up the UI to the rest of the application \r\n\tand setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\nimport { DEFAULTS } from './enums/defaults.enum';\r\n\r\n// iniialize drawParams object\r\nexport const drawParams = {\r\n  visMethod : 1,   // 1 stands for frequency data, 2 stands for waveform data\r\n  drawMethod : \"circles\"\r\n};\r\n\r\nconst init = () =>{\r\n\t// console.log(\"init called\");\r\n\t// console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n\r\n    // initialize web audio\r\n\taudio.setupWebaudio(DEFAULTS.sound1);\r\n\r\n    // hookup canvas element\r\n    let canvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\n\r\n    // setup canvas and hookup ui\r\n\tsetupUI(canvasElement);\r\n    canvas.setupCanvas(canvasElement,audio.analyserNode);\r\n    loop();\r\n}\r\n\r\nconst setupUI = (canvasElement) =>{\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n\t\r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  // add functionality to play buttpn\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n  playButton.onclick = e => {\r\n\r\n    const target = e.target as HTMLInputElement;\r\n    \r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n\r\n    // play track if it is currently paused\r\n    if (target.dataset.playing == \"no\") {\r\n      audio.playCurrentSound();\r\n      target.dataset.playing = \"yes\";\r\n    }\r\n    // else pause the current sound\r\n    else{\r\n      audio.pauseCurrentSound();\r\n      target.dataset.playing = \"no\";\r\n    }\r\n  };\r\n\r\n  // hookup volume slider and label\r\n  let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  let volumeLabel = document.querySelector(\"#label-volume\") as HTMLLabelElement;\r\n\r\n  // add .oninput event to slider\r\n  volumeSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    // set the gain\r\n    audio.setVolume(target.value);\r\n    // update the value of the lable to match slider\r\n    volumeLabel.innerHTML = Math.round(Number(target.value) / 2 * 100).toString();\r\n  };\r\n\r\n  // set value of label to match initial value of slider\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  // hookup track select\r\n  let trackSelect = document.querySelector(\"#track-select\") as HTMLInputElement;\r\n\r\n  // add .onchange event\r\n  trackSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.loadSoundFile(target.value);\r\n\r\n    // pause track if it is currently playing\r\n    if (playButton.dataset.playing == \"yes\"){\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n  // hookup visualization selector\r\n  let visualizationSelect = document.querySelector(\"#vis-select\") as HTMLInputElement;\r\n  visualizationSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n      drawParams.visMethod = Number(target.value);\r\n  }\r\n\r\n  // hookup draw method selector\r\n  let drawSelect = document.querySelector(\"#draw-select\") as HTMLInputElement;\r\n  drawSelect.onchange = e => {\r\n    const target = e.target as HTMLInputElement;\r\n        drawParams.drawMethod = target.value;\r\n  }\r\n\r\n  // hookup bass and treble sliders\r\n  let trebleSlider = document.querySelector(\"#slider-treble\") as HTMLInputElement;\r\n  let trebleLable = document.querySelector(\"#label-treble\") as HTMLLabelElement;\r\n  trebleSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    // set the gain for the highshelf filter\r\n    audio.setHighshelfGain(target.value);\r\n\r\n    // update the value of the lable to match slider\r\n    trebleLable.innerHTML = Math.round(Number(target.value)).toString();\r\n  };\r\n  trebleSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  let bassSlider = document.querySelector(\"#slider-bass\") as HTMLInputElement;\r\n  let bassLabel = document.querySelector(\"#label-bass\") as HTMLLabelElement;\r\n  bassSlider.oninput = e => {\r\n    const target = e.target as HTMLInputElement;\r\n    // set the gain for the lowshelf filter\r\n    audio.setLowshelfGain(target.value);\r\n\r\n    // update the value of the lable to match slider\r\n    bassLabel.innerHTML = Math.round(Number(target.value)).toString();\r\n  };\r\n  bassSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  // mobile menu\r\n  const burgerIcon = document.querySelector(\"#burger\") as HTMLButtonElement;\r\n  const navbarMenu = document.querySelector(\"#nav-links\");\r\n\r\n  burgerIcon.onclick = () => {\r\n    navbarMenu.classList.toggle(\"is-active\");\r\n  }\r\n}\r\n\r\nconst loop = () =>{\r\n\r\n    // animate at 60 fps\r\n    setTimeout(loop, 1000/60);\r\n    canvas.draw(drawParams);\r\n\r\n}\r\n\r\nexport {init};","import * as main from \"./main\";\r\n\r\nconst loadJSON = () =>{\r\n    const url = \"data/av-data.json\";\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    // attempt to load xhr object\r\n    xhr.onload = (e) => {\r\n        const target = e.target as XMLHttpRequest;\r\n        console.log(`In onload - HTTP Status Code = ${target.status}`);\r\n        const text = target.responseText;\r\n        let json;\r\n\r\n        // guard code using try/catch block\r\n        try{\r\n            json = JSON.parse(text);\r\n        }\r\n        catch{\r\n            console.log(\"JSON.parse() failed\");\r\n            return;\r\n        }\r\n\r\n        // load app title\r\n        document.querySelector(\"title\").innerHTML = json.title;\r\n\r\n        // load track select with track names and filepath\r\n        let trackSelect = document.querySelector(\"#track-select\");\r\n        let fileName, trackName;\r\n\r\n        // loop through all track objects within json file and load contents appropriately\r\n        for (let i = 0; i < json.numTracks; i++)\r\n        {\r\n            fileName = json.tracks[i].file;\r\n            trackName = json.tracks[i].track;\r\n\r\n            // add selected property to fist item in dropdown\r\n            if (i <= 0)\r\n            {\r\n                trackSelect.innerHTML += `<option value=\"media/${fileName}\" selected>${trackName}</option>`;\r\n            }\r\n            else\r\n            {\r\n                trackSelect.innerHTML += `<option value=\"media/${fileName}\">${trackName}</option>`;\r\n            }\r\n\r\n            console.log(fileName, trackName);\r\n        }\r\n\r\n        // load app instructions\r\n        document.querySelector(\"#instructions-text\").innerHTML = json.instructions;\r\n\r\n    };\r\n    xhr.onerror = e => {\r\n        const target = e.target as XMLHttpRequest;\r\n        console.log(`In onerror - HTTP Status Code = ${target.status}`);\r\n    }\r\n    xhr.open(\"GET\", url);\r\n    xhr.send();\r\n}\r\n\r\nwindow.onload = ()=>{\r\n\tconsole.log(\"window.onload called\");\r\n\t// load JSON data\r\n\tloadJSON();\r\n\r\n\t// start app\r\n\tmain.init();\r\n}"],"names":["audioCtx","sourceNode","analyserNode","gainNode","biquadFilter","lowShelfBiquadFilter","ctx","canvasWidth","canvasHeight","audioData","maxRadius","middleY","middleX","circle1","circle2","DEFAULTS","Object","freeze","gain","numSamples","loadSoundFile","filePath","src","x","y","radius","color","assign","this","draw","save","fillStyle","beginPath","arc","Math","PI","closePath","fill","restore","type","width","height","fillRect","drawParams","visMethod","drawMethod","setupUI","canvasElement","document","querySelector","onclick","e","element","console","log","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","playButton","target","state","resume","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","value","innerHTML","round","Number","toString","dispatchEvent","Event","onchange","MouseEvent","trebleSlider","trebleLable","setValueAtTime","currentTime","bassSlider","bassLabel","burgerIcon","navbarMenu","classList","toggle","loop","setTimeout","params","getByteFrequencyData","getByteTimeDomainData","globalAlpha","i","length","circleRadius","percent","alpha","translate","maxHeight","rotate","scale","RectangleSprite","translateDist","strokeStyle","lineWidth","x1","y1","moveTo","lineTo","canvas","stroke","x2","y2","x3","y3","x4","y4","window","onload","xhr","XMLHttpRequest","status","json","text","responseText","JSON","parse","title","fileName","trackName","trackSelect","numTracks","tracks","file","track","instructions","onerror","open","send","AudioContext","sound1","Audio","createMediaElementSource","createAnalyser","fftSize","createGain","createBiquadFilter","frequency","connect","destination","analyserNodeRef","getContext","Uint8Array","CircleSprite"],"sourceRoot":""}